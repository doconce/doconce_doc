
<wiki:comment> TITLE: On the Technicalities of Scientific Writing Anno 2012: The DocOnce Way </wiki:comment>
<wiki:comment> TITLE: Scientific Writing Anno 2013: The DocOnce Way </wiki:comment>
<wiki:comment> TITLE: Scientific Writing and Publishing for the Future: How Can We Handle the eLearning Revolution? </wiki:comment>
#summary Scientific Writing and Publishing for the Future

By *Hans Petter Langtangen*
==== Jul 8, 2020 ====

Copyright 2020, Hans Petter Langtangen





---------------------------------------------------------------

Figure: 

(the URL of the image file fig/doconce1b.png must be inserted here)

<wiki:comment>
Put the figure file fig/doconce1b.png on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------



<wiki:comment> !split </wiki:comment>
== Challenges with tools for scientific writing ==

<wiki:comment> !bslidecell 00 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/writing1.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/writing1.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 01 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/direction14.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/direction14.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> FIGURE: [fig/writing_is_hard_stone, width=500 frac=0.5] </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== Scientific writing = LaTeX ====

 * Pre 1980: handwriting + publisher
 * Post 1985: scientists write LaTeX
 * Post 2010: a few scientists explore new digital formats

{{{
\def\FrameCommand{\colorbox{shadecolor}}\FrameRule0.6pt
\MakeFramed {\FrameRestore}\vskip3mm}{\vskip0mm\endMakeFramed}
\providecommand{\shadedquoteBlue}{}
\renewenvironment{shadedquoteBlue}[1][]{
\bgroup\rmfamily\fboxsep=0mm\relax
\begin{shadedskip}
\list{}{\parsep=-2mm\parskip=0mm\topsep=0pt\leftmargin=2mm
\rightmargin=2\leftmargin\leftmargin=4pt\relax}
\relax}{\endlist\end{shadedskip}\egroup}\begin{shadedquoteBlue}
\fontsize{9pt}{9pt}
\begin{Verbatim}
print 'Hello, World!'
\end{Verbatim}
}}}

*Big late 1990s question*: Will MS Word replace LaTeX? It never did!

<wiki:comment> !split </wiki:comment>
==== LaTeX PDF is mostly suboptimal for the new devices ====

<wiki:comment> !bslidecell 00 0.4 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/ipad.png must be inserted here)

<wiki:comment>
Put the figure file fig/ipad.png on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------





---------------------------------------------------------------

Figure: 

(the URL of the image file fig/iphones.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/iphones.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------



<wiki:comment> FIGURE: [fig/mbair, width=400] </wiki:comment>

<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 01 0.6 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/imac.png must be inserted here)

<wiki:comment>
Put the figure file fig/imac.png on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== The book will survive (LaTeX is ideal) ====

---------------------------------------------------------------

Figure: 

(the URL of the image file fig/oldbooks.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/oldbooks.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------



<wiki:comment> !split </wiki:comment>
==== The classical report/paper will survive (LaTeX is ideal) ====

<wiki:comment> !bslidecell 00 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/latex_thesis.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/latex_thesis.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 01 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/latex_paper1.png must be inserted here)

<wiki:comment>
Put the figure file fig/latex_paper1.png on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> * Scientific writing = lecture notes, slides, reports, thesis, books,  ... </wiki:comment>
<wiki:comment> * (Journal papers typeset by journals are out of scope) </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== But there is an explosion of new platforms for digital learning systems! ====

[https://www.youtube.com/watch?v=eW3gMGqcZQc#t=127 MOOCs],
[https://www.khanacademy.org/ Kahn Academy],
[http://ndla.no/ ndla],
[http://h5p.org H5P],
[http://www.haikulearning.com/ Haiku Learning],
[https://www.opigno.org/en Opigno], ...

<wiki:comment> !bslidecell 00 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/digital_learning_words.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/digital_learning_words.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 01 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/digital_learning_iPad.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/digital_learning_iPad.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== My headache: How to write scientific material that can be easily published through old and new media? ====

---------------------------------------------------------------

Figure: 

(the URL of the image file fig/headache4.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/headache4.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------



*LaTeX-for-paper* and *HTML-for-screen* are two very different
writing styles and technology platforms.



<wiki:comment> !split </wiki:comment>
==== Scope: documents with *much* math and computer code ====

*Key question:* 
What tools should I use for scientific writing?





<wiki:comment> !bslidecell 00 0.25 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/LaTeX_logo.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/LaTeX_logo.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 01 0.25 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/MS_Word_logo.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/MS_Word_logo.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 02 0.5 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/sphinx_logo.png must be inserted here)

<wiki:comment>
Put the figure file fig/sphinx_logo.png on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 10 0.25 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/markdown_logo.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/markdown_logo.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 11 0.25 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/MediaWiki_logo.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/MediaWiki_logo.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 12 0.5 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/IPython_logo.png must be inserted here)

<wiki:comment>
Put the figure file fig/IPython_logo.png on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>


<wiki:comment> !split </wiki:comment>
==== There is a jungle of outlets your scientific writings should address ====

<wiki:comment> Insert links here to reports </wiki:comment>

<wiki:comment> !bslidecell 00 0.4 </wiki:comment>

 * BW paper
 * Color paper
 * Slides
 * Web w/design
 * Wiki
 * Blog
 * Notebook
 * ...

<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 01 0.6 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/jungle_with_mess.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/jungle_with_mess.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== Can I assemble lots of different writings to a new future document (book)? ====

Suppose I write various types of scientific material,


 * LaTeX document,
 * blog posts (HTML),
 * web pages (HTML),
 * Sphinx documents,
 * IPython notebooks,
 * wikis,
 * Markdown files, ...

and later want to collect the pieces into a larger document, maybe
some book - is that at all feasible?

<wiki:comment> !bpop highlight-red </wiki:comment>
Probably not, but I have a solution :smile:
<wiki:comment> !epop </wiki:comment>

<wiki:comment> !split </wiki:comment>
== Pros and cons of various tools ==

<wiki:comment> !split </wiki:comment>
==== Popular tools anno 2014 and their math support ====

<wiki:comment> !bpop </wiki:comment>

 * *LaTeX*: de facto standard for math-instensive documents
 * *pdfLaTeX*, *XeLaTeX*, *LuaLaTeX*: takes over (figures in png, pdf) - use these!
 * *MS Word*: too clicky math support and ugly fonts, but much used
 * *HTML with MathJax*: "full" LaTeX *math*, but much tagging
 * *Sphinx*:   somewhat limited LaTeX math support, but great support for web design,   and less tagged than HTML
 * *reStructuredText*: similar to Sphinx, but no math support, transforms to   lots of formats (LaTeX, HTML, XML, Word, OpenOffice, ...)
 * *Markdown*: somewhat limited LaTeX math support, but minor tagging,   transforms to lots of formats (LaTeX, HTML, XML, Word, OpenOffice, ...)
 * *IPython notebooks*: Markdown code/math,   combines Python code, interactivity, and   visualization, but requires all code snippets to sync together
 * *Confluence*: Markdown-like input, with limited LaTeX math support, but converted to XML
 * *MediaWiki*: quite good LaTeX math support (cf. Wikipedia/Wikibooks)
 * Other *wiki* formats: no math support, great for collaborative editing
 * *Wordpress*: supports full HTML with LaTeX *formulas* only
 * *Google blogger*: supports full HTML with MathJax

<wiki:comment> !epop </wiki:comment>

<wiki:comment> !split </wiki:comment>

==== LaTeX is very rich; other tools support much less ====

 * LaTeX has lots of fancy layouts, but few translates to other formats
 * LaTeX *inline* math: works with all math-enabled formats (LaTeX, MathJax, Sphinx, Markdown, MediaWiki, Confluence, ...)
 * LaTeX *equation* math:

    * *LaTeX*: `equation*`, `equation`, `align*`, `align` +      `eqnarray`, `split`, `alignat`, ... (numerous!)
    * *MathJax*: `equation*`, `equation`, `align*`, `align`
    * *MediaWiki*: `equation*`, `equation`, `align*`, `align`
    * *Sphinx*: `equation*`, `equation`, `align*`
    * *Markdown*: `equation*`, `equation`, `eqnarray*`, `align*` (but no labels)



<wiki:comment> !split </wiki:comment>
==== LaTeX is very rich; other tools support much less ====

<wiki:comment> !bpop </wiki:comment>

 * Figures: all
 * Movies: raw HTML or YouTube/Vimeo, (LaTeX)
 * Subfigures: LaTeX (`subfigure`)
 * Floating computer code: LaTeX; fixed computer code: all
 * Floating tables: LaTeX; fixed tables: all
 * Algorithms: LaTeX
 * Page references: LaTeX
 * Cross references: LaTeX (also to external doc.)
 * Equation references: LaTeX, HTML, Sphinx

<wiki:comment> !epop </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== LaTeX is very rich; other tools support much less ====

<wiki:comment> !bpop </wiki:comment>

 * Margin notes: LaTeX, HTML with tailored css code
 * Footnotes: LaTeX, Sphinx, reStructuredText, MediaWiki
 * Bibliography: LaTeX, Sphinx, reStructuredText, MediaWiki
 * Index: LaTeX, Sphinx
 * Hyperlinks: all (but not on paper!)
 * Interactive programs: Sphinx, IPython notebook, raw HTML
 * Searching in multi-page doc.: Sphinx, MediaWiki, LaTeX PDF

<wiki:comment> !epop </wiki:comment>

<wiki:comment> !bpop </wiki:comment>
Highly non-trivial to translate from/to LaTeX!
<wiki:comment> !epop </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== My colleagues face fundamental problem with going from LaTeX to IPython notebook (=Markdown) ====

*Plan.* 
I am used to write LaTeX paper/book-style with lots of
cross-references and *floating* figures, code snippets,
tables, algorithms, but now I *want to convert to
IPython notebooks*.



*Problem.* 
Must have fixed figures, code snippets, tables. No algorithm environment,
cross-referencing, equation referencing. All code needed for a snippet
to run must be included. *It's a different writing style, but lots
of new opportunities*.



<wiki:comment> !split </wiki:comment>
==== Examples on typesetting concerns (1) ====

<wiki:comment> !bpop </wiki:comment>

 * Sphinx refers to figures by the caption (has to be short!) and   strips away any math notation (avoid that!).
 * Sphinx refers to sections by the title, but removes math in the   reference, so avoid math in headlines.
 * Tables cannot be referred to by numbers and have to appear at   fixed positions in the text.
 * Computer code has to appear at fixed positions in the text.
 * Algorithms must be written up using basic elements like lists or   paragraphs with headings.
 * Recipes are often typeset as enumerated lists. For recipes with   code or math blocks: drop the list (gives problems in some formats)   and use paragraph (or subsubsection) headings with "Step 1.",   "Step 2.", etc.

<wiki:comment> !epop </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== Examples on typesetting concerns (2) ====

<wiki:comment> !bpop </wiki:comment>

 * Footnotes must appear as part of the running text (e.g., sentences   surrounded by parenthesis), since only a few formats support footnotes.
 * Sphinx does not handle code blocks where the first line is indented.
 * Multiple plots in the same figure: mount the plots to one image   file and include this (`montage` for png, gif, jpeg; `pdftk`, `pdfnup`,   and `pdfcrop` for PDF).
 * If you need several equations *numbered* in an `align` environment,   recall that Sphinx, Markdown, and MediaWiki cannot handle this,   although they have LaTeX math support.
 * Markdown tolerates labels in equations but cannot refer to them.

<wiki:comment> !epop </wiki:comment>

<wiki:comment> Not valid anymore: </wiki:comment>
<wiki:comment> Keys for items in the bibliography are made visible by Sphinx so </wiki:comment>
<wiki:comment> "bibitems" a la BibTeX must look sensible and consistent. </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== Examples on typesetting concerns (3) ====

<wiki:comment> !bpop </wiki:comment>

 * Index words can appear anywhere in LaTeX, but should be outside   paragraphs in other tools.
 * References to tables, program code and algorithms can only be   made in LaTeX.
 * Figures are floating in LaTeX, but fixed in other tools, so place   figures exactly where they are needed the first time.
 * Curve plots with color lines do not work well in black-and-white   printing. Make sure plots makes sense in color and BW (e.g., by   using colors *and* markers).

<wiki:comment> !epop </wiki:comment>

<wiki:comment> !split </wiki:comment>
==== Solution I: Use a format that translates to many ====

 * Sphinx can do nice HTML, LaTeX, epub, (almost) plain text,   man pages, Gnome devhelp files, Qt help files, texinfo, JSON
 * Markdown can do LaTeX, HTML, MS Word, OpenOffice, XML,   reStructuredText, epub, DocBook, ... but not Sphinx
 * IPython notebook: can do LaTeX, reStructuredText, HTML, PDF,   Python script
 * Sphinx and Markdown has some limited math support

<wiki:comment> !split </wiki:comment>
==== Solution II: Use DocOnce ====

[http://doconce.github.io/doconce/doc/web/index.html DocOnce]
offers minimalistic typing, great flexibility wrt format,
especially for scientific writing with *much math and code*.


 * Can generate LaTeX, HTML, Sphinx, Markdown, MediaWiki, Google wiki,   Creole wiki, reST, plain text
 * Made for large science books *and* small notes
 * Targets paper and screen
 * Many special features (code snippets from files, embedded movies,   admonitions, modern LaTeX layouts, extended math support for Sphinx/Markdown, ...)
 * Very effective for generating slides from ordinary text
 * Applies Mako: DocOnce text is a program (!)
 * Much like Markdown, less tagged than LaTeX, HTML, Sphinx

<wiki:comment> !split </wiki:comment>
== DocOnce: Write once, include anywhere ==



---------------------------------------------------------------

Figure: 

(the URL of the image file fig/doconce1b.png must be inserted here)

<wiki:comment>
Put the figure file fig/doconce1b.png on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------




<wiki:comment> !split </wiki:comment>
==== DocOnce demos ====

http://doconce.github.com/teamods/writing_reports/


 * LaTeX-based PDF [http://doconce.github.com/teamods/writing_reports/_static/report.pdf for screen], [http://doconce.github.com/teamods/writing_reports/_static/report_4printing.pdf for printing], [http://doconce.github.com/teamods/writing_reports/_static/report_4phone.pdf for phone]
 * [http://doconce.github.com/teamods/writing_reports/_static/report_bloodish.html Plain HTML] or [http://doconce.github.com/teamods/writing_reports/_static/report_bootstrap_wtoc.html Bootstrap] or [http://doconce.github.com/teamods/writing_reports/_static/report_bootswatch_journal.html Bootswatch] or with a [http://doconce.github.com/teamods/writing_reports/_static/report_vagrant.html template] or [http://doconce.github.com/teamods/writing_reports/_static/report_github_minimal.html another template] or [http://doconce.github.com/teamods/writing_reports/_static/report_solarized.html solarized]
 * Sphinx: [http://doconce.github.com/teamods/writing_reports/_static/sphinx-agni/index.html agni], [http://doconce.github.com/teamods/writing_reports/_static/sphinx-pyramid/report.html pyramid], [http://doconce.github.com/teamods/writing_reports/_static/sphinx-classy/report.html classy], [http://doconce.github.com/teamods/writing_reports/_static/sphinx-fenics_minimal/report.html fenics], [http://doconce.github.com/teamods/writing_reports/_static/sphinx-redcloud/report.html redcloud]
 * HTML for [http://doconce-report-demo.blogspot.no/ Google] or [http://doconcereportdemo.wordpress.com/ Wordpress] for blog posts
 * [http://doconcedemo.shoutwiki.com/wiki/DocOnce_demo_page MediaWiki] (Wikipedia, Wikibooks, etc)
 * DocOnce [http://doconce.github.com/teamods/writing_reports/_static/report.do.txt.html source code] and [http://doconce.github.io/doconce/doc/pub/tutorial/html/index.html tutorial]

<wiki:comment> !split </wiki:comment>
==== DocOnce disclaimer ====

 * Based on text transformations (reg.exp.) so valid syntax may   occasionally give problems<wiki:comment> * Actively developed and maintained, but one-man show </wiki:comment>


*DocOnce divorce.* 
At any time one can divorce from DocOnce and marry one of the output
formats, such as LaTeX or Sphinx. The generated code is clean.



<wiki:comment> !split </wiki:comment>
==== DocOnce experience ====



 * Code generation is a great thing
 * Preprocessors a la Mako is a great thing
 * Less tagging than LaTeX/HTML is a great thing
 * Code generation software becomes a repository of   advanced and nice constructs for layout




<wiki:comment> !split </wiki:comment>
== A tour of DocOnce ==


<wiki:comment> !split </wiki:comment>
==== Title, authors, date, toc ====

{{{
TITLE: Some Title
AUTHOR: name1 at institution1, with more info & institution2
AUTHOR: name2 email:name2@web.com at institution
DATE: today

# A table of contents is optional:
TOC: on
}}}

*Notice.* 
Title and authors must have all information *on a single line*!



<wiki:comment> !split </wiki:comment>
==== Abstract ====

{{{
__Abstract.__
Here goes the abstract...
}}}

Or:
{{{
__Summary.__
Here goes the summary...
}}}


<wiki:comment> !split </wiki:comment>
==== Section headings ====

Headings are surrounded by `=` signs:
{{{
======= This is an H1/chapter heading =======

===== This is an H2/section heading =====

===== This is an H3/subsection heading =====

=== This is an H4/paragraph heading ===

__This is a paragraph heading.__
}}}

Result:

== This is an H1/chapter heading ==

==== This is an H2/section heading ====

==== This is an H3/subsection heading ====

==== This is an H4/paragraph heading ====

*This is a paragraph heading.*

<wiki:comment> !split </wiki:comment>
==== Markup and lists ====

{{{
 * Bullet list items start with `*`
   and may span several lines
 * *Emphasized words* are possible
 * _Boldface words_ are also possible
 * color{red}{colored words} too
 * `inline verbatim code` is featured
   o and sublists with enumerated items starting with `o`
   o items are just indented as you would do in email
}}}

This gets rendered as


 * Bullet lists start with `*`   and may span several lines
 * *Emphasized words* are possible
 * *Boldface words* are also possible
 * <font color="red">colored words</font> too
 * `inline verbatim code` is featured

  # and sublists with enumerated items starting with `o`
  # items are just indented as you would do in email



<wiki:comment> !split </wiki:comment>
==== Labels, references, index items ====

{{{
# Insert index items in the source
idx{key word1} idx{key word2}

# Label
===== Some section =====
label{this:section}

# Make reference
As we saw in Section ref{this:section}, references, index
items and labels follow a syntax similar to LaTeX
but without backslashes.

# Make reference to equations
See (ref{eq1})-(ref{myeq}).

# Make hyperlink
"some link text": "https://github.com/doconce/doconce"

# Hyperlink with complete URL as link text
URL: "https://github.com/doconce/doconce"
}}}

<wiki:comment> !split </wiki:comment>
==== Figures and movies ====

*Important:* 
Figures with HTML and LaTeX size info, and caption: *everything on one line*



{{{
FIGURE: [figdir/myfig, width=300 frac=1.2] My caption. label{fig1}
}}}

Movies are also supported:

{{{
MOVIE: [http://youtu.be/IDeGDFZSYo8, width=420 height=315]
}}}
and rendered as

 `http://youtu.be/IDeGDFZSYo8`: load [movie_player1.html `movie_player1.html`] into a browser

<wiki:comment> !split </wiki:comment>
==== Math ====

Inline math as in LaTeX:

{{{
...where $a=\int_{\Omega}fdx$ is an integral.
}}}
gets rendered as ...where `a=\int_{\Omega}fdx` is an integral.


An equation environment is surrounded by `!bt` and `!et` tags,
the rest is plain LaTeX:

{{{
!bt
\begin{align}
\frac{\partial u}{\partial t} &= \nabla^2 u,
label{a:eq}\\ 
\nabla\cdot\pmb{v} & = 0
label{b:eq}
\end{align}
!et
}}}
which is rendered as

{{{
\begin{align}
\frac{\partial u}{\partial t} &= \nabla^2 u,
label{c:eq}\\ 
\nabla\cdot\pmb{v} & = 0
label{d:eq}
\end{align}
}}}

<wiki:comment> !split </wiki:comment>
==== Math flexibility ====

Limit math environments to

{{{
\[ ... \]

\begin{equation*}
\end{equation*}

\begin{equation}
\end{equation}

\begin{align*}
\end{align*}

\begin{align}
\end{align}
}}}

*DocOnce fix of shortcomings.* 

 * Sphinx, Markdown, and MediaWiki cannot have   `align` with labels
 * MathJax (HTML, Sphinx, Markdown, Mediawiki, ...) cannot   handle equation references across web pages



<wiki:comment> !split </wiki:comment>
==== Displaying code ====

Code is enclosed in `!bc` and `!ec` tags:

{{{
!bc pycod
def solver(I, a, T, dt, theta):
    """Solve u'=-a*u, u(0)=I, for t in (0,T] with steps of dt."""
    dt = float(dt); N = int(round(T/dt)); T = N*dt
    u = zeros(N+1); t = linspace(0, T, N+1)

    u[0] = I
    for n in range(0, N):
        u[n+1] = (1 - (1-theta)*a*dt)/(1 + theta*dt*a)*u[n]
    return u, t
!ec
}}}
This gets rendered as

{{{
def solver(I, a, T, dt, theta):
    """Solve u'=-a*u, u(0)=I, for t in (0,T] with steps of dt."""
    dt = float(dt); N = int(round(T/dt)); T = N*dt
    u = zeros(N+1); t = linspace(0, T, N+1)

    u[0] = I
    for n in range(0, N):
        u[n+1] = (1 - (1-theta)*a*dt)/(1 + theta*dt*a)*u[n]
    return u, t
}}}



<wiki:comment> !split </wiki:comment>
==== Copying code from source files ====

We recommend to copy as much code as possible directly from the
source files:

{{{
@@@CODE path/to/file
@@@CODE path/to/file   fromto: start-regex@end-regex
}}}
For example, copying a code snippet starting with `def solver(` and
ending with (line not included) `def next(x, y,` is specified by
start and end regular expressions:

{{{
@@@CODE src/somefile.py  fromto: def solver\(@def next\(x,\s*y,
}}}

<wiki:comment> !split </wiki:comment>
==== Typesetting of code is implied by the file extension ====

 * `.py`: `pypro` if complete file, `pycod` if snippet
 * `.pyopt`: visualized execution via the [http://pythontutor.com Online Python Tutor]
 * `.f`, `.f90`, `f.95`: `fpro` and `fcod`
 * `.cpp`, `.cxx`: `cpppro` and `cppcod`
 * `.c`: `cpro` and `ccod`
 * `.*sh`: `shpro` and `shcod`
 * `.m`: `mpro` and `mcod`
 * `ptex2tex`: between 40+ code styles in LaTeX
 * `pygments` is used for code in HTML (ca 10 styles)

<wiki:comment> !split </wiki:comment>
==== Demonstrating code execution; Online Python Tutor ====

With `!bc pyoptpro` or a file `*.pyopt`, the code applies the
[http://pythontutor.com Online Python Tutor] for displaying
program flow and state of variables:

{{{
def solver(I, a, T, dt, theta):
    dt = float(dt)
    N = int(round(T/dt))
    T = N*dt
    u = [0.0]*(N+1)
    t = [i*dt for i in range(N+1)]

    u[0] = I
    for n in range(0, N):
        u[n+1] = (1 - (1-theta)*a*dt)/(1 + theta*dt*a)*u[n]
    return u, t

u, t = solver(I=1, a=1, T=3, dt=1., theta=0.5)
print u
}}}

<wiki:comment> !split </wiki:comment>
==== Demonstrating code execution; Sage Cell Server ====

With `!bc pyscpro` or a file `*.pysc`, the code is typeset in
a sage cell:

{{{
a = 2
b = 3
print 'a+b:', a + b

# In a sage cell we can also plot
from matplotlib.pyplot import *
from numpy import *
x = linspace(0, 4*pi, 101)
y = exp(-0.1*x)*cos(x)
plot(x, y)
xlabel('x'); ylabel('y')
show()
}}}

*Warning.* 
Works only in Sphinx documents (but HTML support is possible).



<wiki:comment> !split </wiki:comment>
==== Demonstrating code execution; IPython notebook ====

Can take a [http://doconce.github.com/teamods/writing_reports/_static/report.do.txt.html DocOnce source] and transform to an [http://nbviewer.ipython.org/url/hplgit.github.com/teamods/writing_reports/_static/report.ipynb IPython notebook] with [http://doconce.github.com/teamods/writing_reports/_static/report.ipynb.html source]

<wiki:comment> !split </wiki:comment>
==== Tables ====

{{{

  |--------------------------------|
  |time  | velocity | acceleration |
  |---r-------r-----------r--------|
  | 0.0  | 1.4186   | -5.01        |
  | 2.0  | 1.376512 | 11.919       |
  | 4.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|

}}}
Gets rendered as


 ||  _time_   ||  _velocity_   ||  _acceleration_   ||
 ||  0.0      ||  1.4186       ||  -5.01            ||
 ||  2.0      ||  1.376512     ||  11.919           ||
 ||  4.0      ||  1.1E+1       ||  14.717624        ||



<wiki:comment> !split </wiki:comment>
==== Newcommands for math ====

 * `newcommands*.tex` files contain newcommands
 * Used directly in LaTeX
 * Substitution made for many other formats

<wiki:comment> !split </wiki:comment>
==== Labels, citations, index, bibliography ====

Lables, citations, index, and bibliography follow the ideas of
LaTeX, but without backslashes:

{{{
===== My Section =====
label{sec:mysec}

idx{key equation} idx{$\u$ conservation}

We refer to Section ref{sec:yoursec} for background material on
the *key equation*. Here we focus on the extension


!bt
\begin{equation}
\Ddt{\u} = \mycommand{v} label{mysec:eq:Dudt}
\end{equation}
!et
Equation (ref{mysec:eq:Dudt}) is important, see
cite{Larsen_et_al_2002,Johnson_Friedman_2010a}.
Also, cite{Miller_2000} supports such a view.

Figure ref{mysec:fig:myfig} displays the features.

FIGURE: [fig/myfile, width=600] My figure. label{mysec:fig:myfig}

===== References =====

BIBFILE: papers.pub
}}}
The `papers.pub` file must be in [https://github.com/doconce/publish Publish]
format (easy to make from BibTeX).

<wiki:comment> !split </wiki:comment>
==== Exercises ====

DocOnce offers a special format for *exercises*, *problems*, *projects*,
and *examples*:

{{{
===== Problem: Flip a Coin =====
label{demo:ex:1}
files=flip_coin.py, flip_coin.pdf
solutions=mysol.txt, mysol_flip_coin.py
keywords = random numbers; Monte Carlo simulation

!bsubex
Make a program that simulates flipping a coin $N$ times.

!bhint
Use `r = random.random()` and define head as `r <= 0.5`.
!ehint
!esubex

!bsubex
Compute the probability of getting heads.

!bans
0.5.
!eans
!esubex
}}}

<wiki:comment> !split </wiki:comment>
==== Rendering of the previous page ====

<wiki:comment> --- begin exercise --- </wiki:comment>

==== Problem 1: Flip a Coin ====

<wiki:comment> keywords = random numbers; Monte Carlo simulation </wiki:comment>


*a)*
Make a program that simulates flipping a coin `N` times.

<wiki:comment> --- begin hint in exercise --- </wiki:comment>

*Hint.*
Use `r = random.random()` and define head as `r <= 0.5`.

<wiki:comment> --- end hint in exercise --- </wiki:comment>

*b)*
Compute the probability of getting heads.


<wiki:comment> --- begin answer of exercise --- </wiki:comment>
*Answer.*
0.5.
<wiki:comment> --- end answer of exercise --- </wiki:comment>

Filenames: `flip_coin.py`, `flip_coin.pdf`.
<wiki:comment> solution files: mysol.txt, mysol_flip_coin.py </wiki:comment>

<wiki:comment> --- end exercise --- </wiki:comment>


<wiki:comment> !split </wiki:comment>
==== Exercises ====

All *exercises*, *problems*, and *projects* in a document are parsed
and available in a data structure (list of dicts) for further
processing (e.g., making a book of problems).

{{{
[{'answer': '',
  'closing_remarks': '',
  'file': ['flip_coin.py', 'flip_coin.pdf'],
  'hints': [],
  'keywords': ['random numbers', 'Monte Carlo simulation'],
  'label': 'demo:ex:1',
  'solution_file': ['mysol.txt', 'mysol_flip_coin.py'],
  'subex': [{'answer': '',
             'file': None,
             'hints': ['Use `r = random.random()` ...'],
             'solution': '',
             'text': 'Make a program that simulates ...'},],
  'title': 'Flip a Coin',
  'type': 'Problem'}]
}}}

<wiki:comment> !split </wiki:comment>
==== Use of preprocessors ====

 * Simple if-else tests a la the C/C++ preprocessor
 * `FORMAT` variable can be used to test on format, e.g.,

    * if latex/pdflatex do one sort of code (raw LaTeX)
    * if html, do another type of code (raw HTML)


 * Easy to comment out large portions of text
 * Easy to make different versions of the document
 * The mako preprocessor is really powerful - gives a   complete programming language inside the document!

<wiki:comment> !split </wiki:comment>
==== DocOnce admonitions ====

*Use with caution!* 
Such environments may light up the document, but can be disturbing too.
Some admon styles have icons.



*Going deeper.* 
More details can be separated from the rest.



*Time for review!* 
Tasks:


  * Maybe ask a question?
  * Or two?



Conclusion:


  * A special "block" admonition has less pronounced typesetting and    can be used when no special icon is desired. Good for slides.



<wiki:comment> !split </wiki:comment>
==== Generalized references ====

 * Chapters can be stand-alone documents or parts of a book
 * In a book you frequently refer to other chapters
 * When a chapter is a stand-alone document, it must refer to   another stand-alone chapter document
 * This requires *generalized cross-referencing*
 * LaTeX has a solution: `xr`
 * DocOnce has a solution also for HTML, Sphinx, Markdown, ...

{{{
ref[internal][latex cite][external]
}}}

{{{
...as shown in ref[Section ref{sec:eqs}][ in cite{math_eqs_2020}][
the document "Mathematical Equations":
"http://some.net/doc/matheqs.html" cite{math_eqs_2020}].
}}}


<wiki:comment> !split </wiki:comment>
==== Slides ====

Very effective way to generate slides from running text:


 * Take a copy of your DocOnce prose
 * Strip off as much text as possible
 * Emphasize key points in bullet items
 * Focus on key equations, figures, movies, key code snippets
 * Insert `!split` wherever you want a new slide to begin
 * Insert `!bpop` and `!epop` around elements to pop up   in sequence (or insert `|\pause|` inside code blocks)
 * Use 7 `=` or 5 `=` in headings (H2 or H3)
 * Supported slide types: Beamer, HTML,   HTML5 (reveal.js, deck.js, csss, dzslides)

<wiki:comment> !split </wiki:comment>
==== Example on slide code ====

{{{
!split
===== Headline =====

 * Key point 1
 * Key point 2
 * Key point 3: Although long
   bullet points are not recommended in general, we need
   it here for demonstration purposes to investigate
   what happens with the slide layout where there is
   so much text under one point

FIGURE: [fig/teacher1, width=100 frac=0.4]

Key equation:

!bt
\[ -\nabla^2 u = f \quad\hbox{in }\Omega \]
!et

And maybe a final comment?

!split
===== Next slide... =====
}}}

<wiki:comment> !split </wiki:comment>
==== Example on slide code ====

Last page gets rendered to

==== Headline ====

 * Key point 1
 * Key point 2

---------------------------------------------------------------

Figure: 

(the URL of the image file fig/teacher1.gif must be inserted here)

<wiki:comment>
Put the figure file fig/teacher1.gif on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------



Key equation:

{{{
\[ -\nabla^2 u = f \quad\hbox{in }\Omega \]
}}}

And maybe a final comment?

<wiki:comment> !split </wiki:comment>
==== Grid layout of slide: MxN cells ====

Example with a bullet list to the left and
a figure to the right (two cells: 00 and 01):

{{{
!split
===== Headline =====

!bslidecell 00
!bpop
 * Key point 1
 * Key point 2
 * Key point 3
!epop

!bpop
!bt
\[ -\nabla^2 u = f \quad\hbox{in }\Omega \]
!et
!epop

!eslidecell

!bslidecell 01
FIGURE: [fig/broken_pen_and_paper, width=400 frac=0.8]
!eslidecell

!split
===== Next slide... =====
}}}

<wiki:comment> !split </wiki:comment>
==== Grid layout of slide: MxN cells ====

Last page gets rendered to




==== Headline ====

<wiki:comment> !bslidecell 00 </wiki:comment>
<wiki:comment> !bpop </wiki:comment>

 * Key point 1
 * Key point 2
 * Key point 3

<wiki:comment> !epop </wiki:comment>

<wiki:comment> !bpop </wiki:comment>
{{{
\[ -\nabla^2 u = f \quad\hbox{in }\Omega \]
}}}
<wiki:comment> !epop </wiki:comment>

<wiki:comment> !eslidecell </wiki:comment>

<wiki:comment> !bslidecell 01 </wiki:comment>


---------------------------------------------------------------

Figure: 

(the URL of the image file fig/broken_pen_and_paper.jpg must be inserted here)

<wiki:comment>
Put the figure file fig/broken_pen_and_paper.jpg on the web (e.g., as part of the
googlecode repository) and substitute the line above with the URL.
</wiki:comment>
---------------------------------------------------------------


<wiki:comment> !eslidecell </wiki:comment>


<wiki:comment> !split </wiki:comment>
==== Classic slide types ====

 * LaTeX Beamer
 * Plain HTML w/various styles

   * separate slides w/navigation
   * one big slide



<wiki:comment> !split </wiki:comment>
==== HTML5 slide types ====

<wiki:comment> !bpop </wiki:comment>

 * Supported HTML5 packages:

   * [http://lab.hakim.se/reveal-js/ reveal.js]
   * [http://imakewebthings.com/deck.js/ deck.js]
   * [http://paulrouget.com/dzslides/ dzslides]
   * [http://leaverou.github.com/csss/#intro csss]


 * *Problem*: each package has its own syntax (though similar)

   * *Solution*: slide code is autogenerated from DocOnce


 * *Problem*: reveal and deck have numerous styles

   * *Solution*: easy [http://doconce.github.com/teamods/doconce/demo/index.html to autogenerate all styles] for a talk


 * *Problem*: HTML5 slides need many style files

   * *Solution*: autocopy all files to talk directory


 * *Problem*: original versions of the styles have too large fonts,   centering, and other features not so suitable for lectures   with much math and code

   * *Solution*: DocOnce contains adjusted css files



<wiki:comment> !epop </wiki:comment>


<wiki:comment> !split </wiki:comment>
==== DocOnce to HTML ====

Run in terminal window:
{{{
doconce format html doconcefile

# Solarized HTML style
doconce format html doconcefile --html_solarized

# Control pygments typesetting of code
doconce format html doconcefile --pygments_html_style=native

# Or use plain <pre> tag for code
doconce format html doconcefile --no_pygments_html

# Further making of slides
doconce slides_html doconcefile reveal --html_slide_theme=darkgray
}}}

<wiki:comment> !split </wiki:comment>
==== Output for blog posts ====

Two formats of blog posts are supported:


 * Google's [http://doconce-report-demo.blogspot.no/ blogspot.com]:   just paste the raw HTML (full support of math and code)
 * [http://doconcereportdemo.wordpress.com/ Wordpress]:   despite limited math, DocOnce manipulates the math   such that even `equation` and `align` work in Wordpress :-)

For wordpress, add `--wordpress`:
{{{
doconce format html doconcefile --wordpress
}}}
and paste the code into the text area.



<wiki:comment> !split </wiki:comment>
==== DocOnce to pdfLaTeX ====

{{{
doconce format pdflatex doconcefile --latex_code_style=lst

pdflatex doconcefile
bibtex doconcefile
pdflatex doconcefile
}}}

<wiki:comment> !split </wiki:comment>
==== DocOnce to Sphinx ====

{{{
doconce format sphinx doconcefile

# Autocreate sphinx directory
doconce sphinx_dir theme=pyramid doconcefile

# Copy files and build HTML document
python automake-sphinx.py

google-chrome sphinx-rootdir/_build/html/index.html
}}}

Much easier than running the Sphinx tools manually!

<wiki:comment> !split </wiki:comment>
==== Output for wiki ====

Only MediaWiki supports math.

{{{
doconce format mwiki doconcefile
}}}


Recommended site:


 * [http://doconcedemo.shoutwiki.com/wiki/DocOnce_demo_page ShoutWiki]   for standard wikis

Publishing of "official" documents:


 * [http://en.wikibooks.org/wiki/Wikibooks:WIW Wikibooks]   (can test code in the [http://en.wikibooks.org/wiki/Wikibooks:Sandbox sandbox])
 * Wikipedia

<wiki:comment> !split </wiki:comment>
==== DocOnce to other formats ====

{{{
doconce format pandoc doconcefile  # (Pandoc extended) Markdown
doconce format gwiki  doconcefile  # Googlecode wiki
doconce format cwiki  doconcefile  # Creole wiki (Bitbucket)
doconce format rst    doconcefile  # reStructuredText
doconce format plain  doconcefile  # plain, untagged text for email
}}}

<wiki:comment> !split </wiki:comment>
==== Installation ====

 * Source at [https://github.com/doconce/doconce GitHub] (recommended!)

   * `git clone` + `python setyp.py install`


 * Many [http://doconce.github.io/doconce/doc/pub/manual/html/manual.html#installation-of-doconce-and-its-dependencies dependencies...]

   * Must have `preprocess` and `mako`
   * Need `latex`, `sphinx`, `pandoc`, etc. (see the [http://doconce.github.io/doconce/doc/pub/manual/html/manual.html#installation-of-doconce-and-its-dependencies Installation] description)
   * Easy for slides: only `preprocess` and `mako` are needed :-)



<wiki:comment> !split </wiki:comment>
==== Writing tips for LaTeX writers who want to convert to DocOnce *and generate other formats* ====

 * `doconce latex2doconce` helps the translation
 * Use `\[ \]`, `equation`, `equation*`, `align`, `align*` and nothing more for   equations
 * Figures: avoid subfigures (combine image files instead), use `\includegraphics`, have captions after graphics, use short figure captions, position exactly where needed
 * Tables: have them inline (not floating), with no caption
 * Computer codes: have them inline (not floating)
 * Rewrite all `pageref` commands
 * Do not use *algorithm* environments, use simple list formatting instead
 * Avoid math in section headings
 * Use `pdflatex` or `xetex`
 * Use BibTeX (can easily be converted to [https://github.com/doconce/publish publish] used by DocOnce)
 * Use `\href` for links (and insert links frequently)
 * Use the `bm` package for boldface `\bm{u}`
 * Place all newcommands in a separate file, with one definition per line   (multiline definitions goes to a separate LaTeX preamble file in DocOnce)
 * Avoid all fancy LaTeX constructs - more backslashes than needed in math   and sections is a bad thing...

<wiki:comment> !split </wiki:comment>
==== DocOnce writing tips ====

<wiki:comment> * See the previous *Typesetting concerns I, II and III* slides for issues when writing </wiki:comment>
<wiki:comment> for multiple formats. However: DocOnce makes a fix so that Sphinx and </wiki:comment>
<wiki:comment> other formats works with labels in align environments :-) </wiki:comment>

Figures and movies:


 * Prepare figures in the right format: EPS for `latex`, PDF for `pdflatex`,   PNG, GIF or JPEG for HTML formats (`html`, and HTML output from   `sphinx`, `rst`, `pandoc`). One can omit the figure file extension and   `doconce` will pick the most appropriate file for the given output format.
 * Let plotting programs produce both PDF/EPS and PNG files.   (Recall that PDF and EPS are vector graphics formats that can scale to   any size with much higher quality than PNG or other bitmap formats.)
 * Use `doconce combine_images` to combine several images into one.
 * Store all figures in a directory (tree) with name `fig` or `fig-X`,   where `X` is some short logical name for the current document.
 * Store all movies in a directory (tree) with name `mov` or `mov-X`.
 * Favor the movie formats MP4, WebM, and Ogg (best suited for modern browsers).

<wiki:comment> !split </wiki:comment>
==== DocOnce writing tips ====

 * `\bm{u}` gives nicer boldface typesetting of math symbols than   the alternatives `\boldsymbol{u}` and `\pmb{u}`.
 * For HTML-based formats using MathJax, `\bm{u}` is not supported   and therefore automatically replaced by `\boldsymbol{u}` by DocOnce.
 * Use `\<font color="blue">formula</font>` in math expressions to color a part.
 * Not all LaTeX math is supported by MathJax. Some legal LaTeX math   might give MathJax problems - then one has to rewrite the expression   to find a syntax that works both with LaTeX and MathJax.
 * Use `doconce spellcheck *.do.txt` to automatically spellcheck files.
 * Avoid page references and footnotes.

<wiki:comment> !split </wiki:comment>
==== Writing tips for sphinx and other formats ====

For output formats different from `latex`, `pdflatex`, and `html`:


 * Use labels only right after section headings and in equations.
 * Be careful with labels in `align` math environments: `pandoc`   and `mwiki` cannot refer to them.
 * `sphinx` output requires

   * no math in section headings or figure captions     (gets removed in references).
   * running text to start in column 1.
   * progressive section headings: after chapter (9 `=`) comes     section (7 `=`), then subsection (5 `=`), then paragraph     (3 `=`). Do not make jumps in this progression.
   * index entries (``) before the paragraph where they     are introduced and place them *before* subsubsection     headings (`=== ... ===`) and after subsection and section headings.
   * a line of text and no comment or math before code or list.




